import pyodbc
import random
import datetime

connect = pyodbc.connect("DRIVER={Oracle en OraDB18Home1};DBQ=XE;Uid=luis;Pwd=habbo2habbo2")
curr = connect.cursor()

"""
Nombre de la funcion: trigger
Parametros: -
Return: -

Esta funcion es un trigger, el cual se ejecuta con la accion Update del CRUD.
"""
def trigger():
    curr.execute("""CREATE OR REPLACE TRIGGER tigrito
                    BEFORE UPDATE OF HP_actual, estado ON Sansanito_Pokemon FOR EACH ROW
                    BEGIN
                        IF UPDATING THEN
                            IF :new.estado = '-' THEN
                                IF :old.estado = '-' THEN
                                    IF :old.HP_actual = :new.HP_actual THEN
                                        :new.prioridad := :old.prioridad;
                                    ELSE
                                        :new.prioridad := :new.hp_max - :new.HP_actual;
                                    END IF;
                                ELSE
                                    IF :old.HP_actual = :new.HP_actual THEN
                                        :new.prioridad := :old.prioridad - 10;
                                    ELSE
                                        :new.prioridad := :new.hp_max - :new.HP_actual;
                                    END IF;
                                END IF;                                
                            ELSE
                                IF :old.estado = '-' THEN
                                    IF :old.HP_actual = :new.HP_actual THEN
                                        :new.prioridad := :old.prioridad + 10;
                                    ELSE
                                        :new.prioridad := :new.hp_max - :new.HP_actual + 10;
                                    END IF;
                                ELSE
                                    IF :old.HP_actual = :new.HP_actual THEN
                                        :new.prioridad := :old.prioridad;
                                    ELSE
                                        :new.prioridad := :new.hp_max - :new.HP_actual + 10;
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END;""")
    curr.commit()

#-------------------------------------------Variables globales-------------------------------------------

listLegendarios = []
cantPokemon = 0

#-------------------------------------------------TABLAS-------------------------------------------------

"""
Nombre de la funcion: newPoyo
Parametros: -
Return: -

Esta funcion crea o sobreescribe la tabla POYO, leyendo los pokemons del archivo csv
"""
def newPoyo():
    curr.execute("DROP TABLE POYO")
    curr.execute("""CREATE TABLE POYO(
                    pokedex NUMBER,
                    nombre VARCHAR2 (30 CHAR),
                    type1 VARCHAR2 (30 CHAR),
                    type2 VARCHAR2 (30 CHAR),
                    HP NUMBER,
                    legendario CHAR(2)
                )""")
    pokmn = open("pokemon.csv")
    for lineaaaaa in pokmn:
        x = (lineaaaaa.strip()).split(",")
        if x[0] != "#":
            if x[12] == "True":
                x[12] = "Si"
            else:
                x[12] = "No"
            
            x[3] = str(x[3])
            if x[3] == "":
                x[3] = "-"

            curr.execute("INSERT INTO POYO VALUES(?,?,?,?,?,?)",(x[0],x[1],x[2],x[3],x[5],x[12]))
    pokmn.close()
    curr.commit()

"""
Nombre de la funcion: newSansane
Parametros: -
Return: -

Esta funcion crea o sobreescribe la tabla Sansanito_Pokemon.
La tabla es llenada con pokemons de la tabla POYO, los cuales son creados aleatoriamente,
llenandose hasta su maxima capacidad (50)
"""
def newSansane():
    global cantPokemon
    global listLegendarios
    curr.execute("DROP TABLE Sansanito_Pokemon")
    curr.execute("""CREATE TABLE Sansanito_Pokemon(
                    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                    pokedex NUMBER,
                    nombre VARCHAR2 (30 CHAR),
                    type1 VARCHAR2 (30 CHAR),
                    type2 VARCHAR2 (30 CHAR),
                    HP_actual NUMBER,
                    HP_max NUMBER,
                    legendario CHAR(2),
                    estado VARCHAR2(20 CHAR),
                    fecha_ingreso TIMESTAMP,
                    prioridad NUMBER
                )""")

    espacioRestante = 50
    while espacioRestante >= 5:
        curr.execute("SELECT * FROM POYO SAMPLE(1)")

        linea = curr.fetchone()

        pokenumber = linea[0]
        tipo1 = linea[2]
        tipo2 = linea[3]


        if linea[5] == "Si":
            if linea[1] not in listLegendarios:
                listLegendarios.append(linea[1])
                espacioRestante -= 5
            else:
                continue
        else:
            espacioRestante -= 1
        
        vidaMaxima = linea[4]

        vidaActual = random.randint(1,vidaMaxima)

        estadoRandom = random.randint(0,5)
        prioridadPokemon = vidaMaxima - vidaActual + 10
        
        if estadoRandom == 0:
            prioridadPokemon -= 10
            estadoPokemon = "-"
        elif estadoRandom == 1:
            estadoPokemon = "Envenenado"
        elif estadoRandom == 2:
            estadoPokemon = "Paralizado"
        elif estadoRandom == 3:
            estadoPokemon = "Quemado"
        elif estadoRandom == 4:
            estadoPokemon = "Dormido"
        else:
            estadoPokemon = "Congelado"
        
        curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokenumber,linea[1],tipo1,tipo2,vidaActual,vidaMaxima,linea[5],estadoPokemon,prioridadPokemon))
        cantPokemon += 1
    #Ahora para rellenar con no legendarios lo que falta:

    while espacioRestante > 0:
        curr.execute("SELECT * FROM POYO SAMPLE(1)")
        linea = curr.fetchone()
        if linea[5] == "Si":
            continue
        else:
            espacioRestante -= 1
            pokenumber = linea[0]
            tipo1 = linea[2]
            tipo2 = linea[3]
            
            vidaMaxima = linea[4]

            vidaActual = random.randint(1,vidaMaxima)

            estadoRandom = random.randint(0,5)
            prioridadPokemon = vidaMaxima - vidaActual + 10
            
            if estadoRandom == 0:
                prioridadPokemon -= 10
                estadoPokemon = "-"
            elif estadoRandom == 1:
                estadoPokemon = "Envenenado"
            elif estadoRandom == 2:
                estadoPokemon = "Paralizado"
            elif estadoRandom == 3:
                estadoPokemon = "Quemado"
            elif estadoRandom == 4:
                estadoPokemon = "Dormido"
            else:
                estadoPokemon = "Congelado"
            
            curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokenumber,linea[1],tipo1,tipo2,vidaActual,vidaMaxima,linea[5],estadoPokemon,prioridadPokemon))
            cantPokemon += 1
    curr.commit()

#--------------------------------------------CONSULTAS---------------------------------------------------

"""
Nombre de la funcion: ingresarPokemon
Parametros: -
Return: -

Esta funcion crea un pokemon, pidiendo los datos por pantalla, cuidando que no se repitan legendarios,
ademas de cuidar de no sobrepasar la capacidad de Sansanito_Pokemon.
En caso que este llena la tabla Sansanito_Pokemon, reemplaza el pokemon con menor prioridad o sino hay
ningun pokemon con menos prioridad del que deseo ingresar, no se ingresa.
"""
def ingresarPokemon():
    global cantPokemon
    global listLegendarios
    espacioRestante = 50 - (cantPokemon-len(listLegendarios)) -5*len(listLegendarios)
    nombrePoke = input("Ingrese el nombre del pokemon: ")
    curr.execute("SELECT * FROM POYO WHERE nombre =?",(nombrePoke))
    registro = curr.fetchone()
    pokedexx,nombrePoke,tipo1,tipo2,hpMax,legendarioo = registro
    hpActual = int(input("Ingrese la vida actual del pokemon: "))
    estadoo = input("Ingrese el estado: ")
    prioridaaad = hpMax-hpActual
    if estadoo != "-":
        prioridaaad += 10
    
    if legendarioo == "Si":
        if espacioRestante >= 5:
            if nombrePoke not in listLegendarios:
                curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokedexx,nombrePoke,tipo1,tipo2,hpActual,hpMax,legendarioo,estadoo,prioridaaad))
                print("Se ha ingresado el nuevo pokemon.")
                listLegendarios.append(nombrePoke)
                cantPokemon += 1
            else:
                print("No se ha ingresado el pokemon, los legendarios no pueden repetirse")
                return
        elif len(listLegendarios) > 0:
            if nombrePoke not in listLegendarios:
                curr.execute("SELECT * FROM Pokemon_Legendarios ORDER BY prioridad ASC")
                registro = curr.fetchone()
                if registro[10] <= prioridaaad:
                    idpokemonBorrar = registro[0]
                    listLegendarios.remove(registro[2])
                    listLegendarios.append(nombrePoke)
                    curr.execute("DELETE FROM Sansanito_Pokemon WHERE id=?",(idpokemonBorrar))
                    curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokedexx,nombrePoke,tipo1,tipo2,hpActual,hpMax,legendarioo,estadoo,prioridaaad))
                    print("Se ha ingresado el pokemon, y se ha borrado el legendario con menor prioridad.")
                else:
                    print("No se ha ingresado el pokemon porque no hay un legendario con una prioridad mas baja")
            else:
                print("No se ha ingresado el pokemon, los legendarios no pueden repetirse")
                return
        else:
            print("No se ha ingresado el pokemon, ya que no hay legendarios en Sansanito_Pokemon")
    
    else:
        if espacioRestante > 0:
            curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokedexx,nombrePoke,tipo1,tipo2,hpActual,hpMax,legendarioo,estadoo,prioridaaad))
            print("Se ha ingresado el nuevo pokemon.")
            cantPokemon += 1
        else:
            curr.execute("SELECT * FROM Sansanito_Pokemon ORDER BY prioridad ASC")
            for registro in curr:
                if registro[7] == "No" and registro[10] <= prioridaaad:
                    idpokemonBorrar = registro[0]
                    curr.execute("DELETE FROM Sansanito_Pokemon WHERE id=?",(idpokemonBorrar))
                    curr.execute("INSERT INTO Sansanito_Pokemon (pokedex,nombre,type1,type2,HP_actual,HP_max,legendario,estado,fecha_ingreso,prioridad) VALUES(?,?,?,?,?,?,?,?,LOCALTIMESTAMP,?)",(pokedexx,nombrePoke,tipo1,tipo2,hpActual,hpMax,legendarioo,estadoo,prioridaaad))
                    print("Se ha ingresado el pokemon, y se borro el pokemon no legendario de menor prioridad")
                    curr.commit()
                    return
                elif registro[7] == "No" and registro[10] > prioridaaad:
                    print("No se ha ingresado el pokemon, no se ha encontrado un pokemon no legendario que tenga menor prioridad.")
                    return
                else:
                    continue
            print("No se ha ingresado el pokemon, no se ha encontrado un pokemon no legendario que tenga menor prioridad.")
    curr.commit()

"""
Nombre de la funcion: topTenPrioridad
Parametros: -
Return: -

Esta funcion crea una vista con los 10 pokemon con mejor prioridad, e imprime por consola.
"""
def topTenPrioridad():
    curr.execute("""
                CREATE OR REPLACE VIEW Mejor_Prioridad_10 AS SELECT * 
                    FROM (
                        SELECT * FROM Sansanito_Pokemon 
                        ORDER BY prioridad DESC
                        )
                    WHERE rownum <= 10
                """)
    curr.commit()

"""
Nombre de la funcion: botTenPrioridad
Parametros: -
Return: -

Esta funcion crea una vista con los 10 pokemon con menor prioridad, e imprime por consola.
"""
def botTenPrioridad():
    curr.execute("""
                CREATE OR REPLACE VIEW Peor_Prioridad_10 AS SELECT * 
                    FROM (
                        SELECT * FROM Sansanito_Pokemon 
                        ORDER BY prioridad ASC
                        )
                    WHERE rownum <= 10
                """)
    curr.commit()

"""
Nombre de la funcion: pokemonConEstado
Parametros: estaduwu (int)
Return: -

Esta funcion crea una vista con los pokemon que tengan cierto estado en especifico (puede ser
envenenado, paralizado, etc o incluso -) e imprime la vista.
"""
def pokemonConEstado(estaduwu):
    if estaduwu == 1:
        estado2 = "-"
    elif estaduwu == 2:
        estado2 = "Envenenado"
    elif estaduwu == 3:
        estado2 = "Paralizado"
    elif estaduwu == 4:
        estado2 = "Quemado"
    elif estaduwu == 5:
        estado2 = "Dormido"
    else:
        estado2 = "Congelado"
    
    curr.execute(f"""
                    CREATE OR REPLACE VIEW Pokemon_Con_Estado AS SELECT * 
                        FROM (
                            SELECT * FROM Sansanito_Pokemon 
                            WHERE estado = '{estado2}'
                            )
                    """)
    curr.commit()

"""
Nombre de la funcion: pokemoLegendarios
Parametros: -
Return: -

Esta funcion crea una vista con los pokemon legendarios, e imprime por consola.
"""
def pokemonLegendarios():
    curr.execute("""
                CREATE OR REPLACE VIEW Pokemon_Legendarios AS SELECT * 
                    FROM (
                        SELECT * FROM Sansanito_Pokemon 
                        WHERE legendario = 'Si'
                        )
                """)
    curr.commit()

"""
Nombre de la funcion: pokemonMasViejo
Parametros: -
Return: -

Esta funcion crea una vista con el pokemon que fue ingresado hace mas tiempo y lo imprime.
"""
def pokemonMasViejo():
    curr.execute("""
                CREATE OR REPLACE VIEW Pokemon_Mas_Viejo AS SELECT * 
                    FROM (
                        SELECT * FROM Sansanito_Pokemon 
                        ORDER BY fecha_ingreso ASC
                        )
                    WHERE rownum = 1
                """)
    curr.commit()

"""
Nombre de la funcion: pokemonMasRepetido
Parametros: -
Return: -

Esta funcion crea una vista con el pokemon que mas se repite dentro de Sansanito_Pokemon, e
imprime el nombre del pokemon con su cantidad de repeticiones.
"""
def pokemonMasRepetido():
    curr.execute("""
                CREATE OR REPLACE VIEW Pokemon_Mas_Repetido AS SELECT * 
                    FROM (
                        SELECT nombre
                            , COUNT(*) repeticiones 
                        FROM Sansanito_Pokemon 
                        GROUP BY nombre
                        ORDER BY 2 DESC
                        )
                    WHERE rownum = 1
                """)
    curr.commit()

"""
Nombre de la funcion: pokemonPorPrioridad
Parametros: -
Return: -

Esta funcion crea una vista de la tabla Sansanito_Pokemon ordenada por la prioridad de los pokemon,
para luego imprimirla por consola.
"""
def pokemonPorPrioridad():
    curr.execute("""
                CREATE OR REPLACE VIEW Pokemon_Por_Prioridad AS SELECT nombre,HP_actual,HP_max,prioridad 
                    FROM (
                        SELECT * FROM Sansanito_Pokemon 
                        ORDER BY prioridad DESC
                        )
                """)
    curr.commit()

#------------------------------------------------CRUD---------------------------------------------------

"""
Nombre de la funcion: pokemonPorPrioridad
Parametros: registro (lista)
Return: lista (lista)

Es una funcion auxiliar para imprimir bonito las tablas, la cual recibe una lista (un registro de la tabla),
y retorna una lista en la cual a cada elemento le agrega espacios de acuerdo al tamaño del string, para luego
imprimir todos los atributos y se vea bien.
"""
def listaPrintRegistroTabla(registro):
    lista = []
    if len(registro) == 11:
        lista.append(" "*(4-len(registro[0]))+registro[0])
        lista.append(" "*(9-len(registro[1])) + registro[1])
        lista.append(" "*(26-len(registro[2])) + registro[2])
        lista.append(" "*(8-len(registro[3])) + registro[3])
        lista.append(" "*(8-len(registro[4])) + registro[4])
        lista.append(" "*(8-len(registro[5])) + registro[5])
        lista.append(" "*(8-len(registro[6])) + registro[6])
        lista.append("     " + registro[7] + "     ")
        lista.append(" "*(10-len(registro[8])) + registro[8])
        lista.append(" "*(18-len(registro[9])) + registro[9])
        lista.append(" "*(11-len(registro[10])) + registro[10])
    elif len(registro) == 4:
        lista.append(" "*(26-len(registro[0])) + registro[0])
        lista.append(" "*(8-len(registro[1])) + registro[1])
        lista.append(" "*(8-len(registro[2])) + registro[2])
        lista.append(" "*(11-len(registro[3])) + registro[3])
    else:
        print("Error: Funcion auxiliar del printeo de las tablas - no coincidio el len del registro.")
    return lista

"""
Nombre de la funcion: create
Parametros: -
Return: -

Esta funcion crea un pokemon, pidiendo los datos por pantalla, cuidando que no se repitan legendarios,
ademas de cuidar de no sobrepasar la capacidad de Sansanito_Pokemon.
En caso que este llena la tabla Sansanito_Pokemon, reemplaza el pokemon con menor prioridad o sino hay
ningun pokemon con menos prioridad del que deseo ingresar, no se ingresa.
"""
def create():
    ingresarPokemon()

"""
Nombre de la funcion: read
Parametros: cuantos (int)
Return: -

Esta funcion recibe un entero el cual indica cuantos pokemon desea imprimir por la consola, luego pide que
ingrese los id de los pokemon separados por ','. Finalmente imprime estos  pokemon junto a sus atributos,
en forma de tabla en la consola.
"""
def read(cuantos):
    if cuantos > 1:
        i = 0
        #crea una lista con los id de los pokemon a leer
        inputt = input("Ingresa los ID: ")
        listaID = inputt.strip().split(',')
        while i < cuantos:
            listaID[i] = int(listaID[i])
            i += 1
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")

        for ID in listaID:
            curr.execute(f"SELECT * FROM Sansanito_Pokemon WHERE id = '{ID}'")         
            registro = curr.fetchone()

            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
    else:
        inputt = int(input("Ingresa el ID del pokemon: "))
        curr.execute(f"SELECT * FROM Sansanito_Pokemon WHERE id = '{inputt}'")
        idd,pokedex,nombre,tipo1,tipo2,hpact,hpmax,legendario,estado,fechaingreso,prioridad = curr.fetchone()
        print("---------------Datos del pokemon---------------")
        print("ID: ",idd)
        print("Nro pokedex: ",pokedex)
        print("Nombre: ",nombre)
        print("Tipo 1: ",tipo1)
        print("Tipo 2: ",tipo2)        
        print("HP actual: ",hpact)
        print("HP maxima: ",hpmax)
        print("Es legendario: ",legendario)
        print("Estado: ",estado)
        print("Fecha de ingreso: ",fechaingreso)
        print("Prioridad: ",prioridad)
        print("-----------------------------------------------")


"""
Nombre de la funcion: update
Parametros: -
Return: -

Esta funcion modifica los atributos de un pokemon en especifico, el cual es identificado gracias a la id, 
que se pide ingresar por consola.
"""
def update():
    IDuwu = int(input("Ingresa el id del pokemon que desea cambiar: "))
    vidaActual = int(input("Ingresa el valor de la nueva HP actual: "))
    estado = input("Ingrese el nuevo estado: ")
    curr.execute("""UPDATE Sansanito_Pokemon
                    SET HP_actual = ?, estado = ?
                    WHERE id = ?;""",(vidaActual,estado,IDuwu))
    trigger()
    curr.commit()

"""
Nombre de la funcion: delete
Parametros: -
Return: -

Esta funcion pide que se ingrese el id del pokemon que se desea eliminar, luego con la id lo elimina de la tabla
Sansanito_Pokemon.
"""
def delete():
    global cantPokemon
    global listLegendarios
    IDuwu = input("Ingrese el id del pokemon que desea borrar: ")
    curr.execute("SELECT * FROM Sansanito_Pokemon WHERE id=?",(IDuwu))
    registro = curr.fetchone()
    if registro[7] == "Si":
        listLegendarios.remove(registro[2])
    curr.execute("DELETE FROM Sansanito_Pokemon WHERE id=?",(IDuwu))
    cantPokemon -= 1

    curr.commit()
        
#-----------------------------------------------menu/main----------------------------------------------

"""
Nombre de la funcion: menu
Parametros: menuprincipal (bool), opcion (int), opcioestado (int)
Return: -

Esta funcion es un menu recursivo, el cual recibe como parametros unas variables que me permiten saber cual es la opcion
que se ha elegido con anteioridad en el menu, dadas las opciones se presentan distinas opciones o menus por consola.
"""
def menu(menuprincipal,opcion,opcionestado):
    if menuprincipal == True:
        print("")
        print("")
        print("****************************************************************************************")
        print("*                                    MENU PRINCIPAL                                    *")
        print("****************************************************************************************")
        print("*  1- Ingresar un pokemon                                                              *")
        print("*  2- Los 10 Pokemon con mayor prioridad                                               *")
        print("*  3- Los 10 Pokemon con menor prioridad                                               *")
        print("*  4- Todos los pokemon con un estado en especifico                                    *")
        print("*  5- Todos los pokemon legendarios                                                    *")
        print("*  6- El pokemon que lleva mas tiempo ingresado                                        *")
        print("*  7- Nombre del pokemon mas repetido                                                  *")
        print("*  8- Nombre, HP actual y maximo, y prioridad de los pokemon ordenados por prioridad   *")
        print("*  9- CRUD                                                                             *")
        print("*  0- Cerrar programa                                                                  *")
        print("****************************************************************************************")
        print("")
        inputt = int(input("Ingrese el número de la opción que desea: "))
        menu(False,inputt,-1)
    elif (menuprincipal == False) and (opcion == 1):
        ingresarPokemon()
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 2):
        topTenPrioridad()
        print("")
        print("Los 10 pokemon con mayor prioridad son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Mejor_Prioridad_10")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 3):
        botTenPrioridad()
        print("")
        print("Los 10 pokemon con menor prioridad son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Peor_Prioridad_10")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 4):
        print("")
        print("¿Pokemon con cual estado?")
        print("1- Normal")
        print("2- Envenenado")
        print("3- Paralizado")
        print("4- Quemado")
        print("5- Dormido")
        print("6- Congelado")
        estado = int(input("Ingrese la opcion: "))
        pokemonConEstado(estado)
        menu(False,-1,estado)
    elif (menuprincipal == False) and (opcion == 5):
        pokemonLegendarios()
        print("")
        print("Los pokemon legendarios son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Legendarios")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 6):
        pokemonMasViejo()
        curr.execute("SELECT * FROM Pokemon_Mas_Viejo")
        registro = curr.fetchone()
        print("El pokemon mas viejo es:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        registro[0] = str(int(registro[0]))
        registro[1] = str(int(registro[1]))
        registro[2] = registro[2]
        registro[3] = registro[3]
        registro[4] = registro[4]
        registro[5] = str(int(registro[5]))
        registro[6] = str(int(registro[6]))
        registro[7] = registro[7]
        registro[8] = registro[8]
        registro[9] = str(registro[9])
        registro[10] = str(int(registro[10]))
        l = listaPrintRegistroTabla(registro)
        print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")

        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 7):
        pokemonMasRepetido()
        curr.execute("SELECT * FROM Pokemon_Mas_Repetido")
        registro = curr.fetchone()
        nombre,repeticiones = registro
        print("El pokemon mas repetido es: "+nombre+" (se repite "+str(int(repeticiones))+" veces)")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 8):
        pokemonPorPrioridad()
        print("")
        print("Los pokemon ordenados por su prioridad:")
        print("")
        print(" ________________________________________________________________")
        print("|           Nombre           |  Hp Act  |  Hp Max  |  Prioridad  |")
        print("|____________________________|__________|__________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Por_Prioridad")
        for registro in curr:
            registro[0] = registro[0]
            registro[1] = str(int(registro[1]))
            registro[2] = str(int(registro[2]))
            registro[3] = str(int(registro[3]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|")
            print("|____________________________|__________|__________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcion == 9):
        print("----------------------------------------------")
        print("¿Cual de las opciones del CRUD desea utilizar?")
        print("1- Create")
        print("2- Read")
        print("3- Update")
        print("4- Delete")
        print("")
        print("0- Volver al menu principal")
        print("----------------------------------------------")
        CRUDoption = int(input("Ingrese la opcion: "))
        if CRUDoption == 1:
            create()
            menu(True,-1,-1)
        elif CRUDoption == 2:
            print("")
            cuantosLeo = int(input("Ingrese cuantos desea leer: "))
            read(cuantosLeo)
            menu(True,-1,-1)
        elif CRUDoption == 3:
            update()
            menu(True,-1,-1)
        elif CRUDoption == 4:
            delete()
            menu(True,-1,-1)
        elif CRUDoption == 0:
            menu(True,-1,-1)
        else:
            print("No leyo bien el CRUD option.")
            return
    elif (menuprincipal == False) and (opcion == 0):
        print("")
        print("Cerrando programa...")
        return
    elif (menuprincipal == False) and (opcionestado == 1):
        print("")
        print("Los pokemon en estado normal son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcionestado == 2):
        print("")
        print("Los pokemon envenenados son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)    
    elif (menuprincipal == False) and (opcionestado == 3):
        print("")
        print("Los pokemon paralizados son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcionestado == 4):
        print("")
        print("Los pokemon quemados son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcionestado == 5):
        print("")
        print("Los pokemon dormidos son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    elif (menuprincipal == False) and (opcionestado == 6):
        print("")
        print("Los pokemon congelados son:")
        print("")
        print(" __________________________________________________________________________________________________________________________________________________________________")
        print("|  ID  |  Pokedex  |           Nombre           |   Tipo1  |   Tipo2  |  Hp Act  |  Hp Max  |  Legendario  |   Estado   |      Fecha de ingreso      |  Prioridad  |")
        print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        curr.execute("SELECT * FROM Pokemon_Con_Estado")
        for registro in curr:
            registro[0] = str(int(registro[0]))
            registro[1] = str(int(registro[1]))
            registro[2] = registro[2]
            registro[3] = registro[3]
            registro[4] = registro[4]
            registro[5] = str(int(registro[5]))
            registro[6] = str(int(registro[6]))
            registro[7] = registro[7]
            registro[8] = registro[8]
            registro[9] = str(registro[9])
            registro[10] = str(int(registro[10]))
            l = listaPrintRegistroTabla(registro)

            print("|",l[0],"|",l[1],"|",l[2],"|",l[3],"|",l[4],"|",l[5],"|",l[6],"|",l[7],"|",l[8],"|",l[9],"|",l[10],"|")
            print("|______|___________|____________________________|__________|__________|__________|__________|______________|____________|____________________________|_____________|")
        menu(True,-1,-1)
    else:
        print("")
        print("No entro a ninguna opcion el menu, algo paso xd")
        print("menuprincipal: "+str(menuprincipal))
        print("opcion: "+str(opcion))
        print("opcion estado: "+str(opcionestado))
        return



newPoyo()
newSansane()
pokemonLegendarios()
trigger()
menu(True,-1,-1)